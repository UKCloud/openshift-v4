---
- hosts: localhost

  tasks:
  - name: Get all existing routes
    k8s_facts:
      kind: Route
    register: routes

  - name: Get namespaces for all existing routes
    set_fact:
      namespaces: "{{ routes | to_json | from_json | json_query(namespacesQuery) | unique }}"
    vars:
      namespacesQuery: "resources[*].metadata.namespace"

  - name: Label namespaces so existing routes get picked up on appropriate ingresscontroller
    k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Namespace
        metadata:
          name: "{{ item }}"
          labels:
            securitydomain: "{{ default_ingress_controller }}"
    with_items: "{{ namespaces }}"

  - name: Get nodes
    k8s_facts:
      kind: Node
    register: nodes

  - name: Build nodeLabelRaw dicts
    set_fact:
      nodeLabelRaw: '{{ nodeLabelRaw | default({}) | combine ( { "nodes": nodes | to_json | from_json | json_query(nodeLabelRawQuery), "securitydomain": item.name } ) }}'
    vars:
      nodeLabelRawQuery: "resources[?contains(metadata.name,'worker-{{ item.name }}')].metadata.name"
    with_items: "{{ ingress_controllers }}"
    register: nodeLabelsRaw
  
  - name: Flatten nodeLabelsRaw
    set_fact:
      nodeLabels: "{{ nodeLabelsRaw.results | to_json | from_json | json_query(nodeLabelsQuery) }}"
    vars:
      nodeLabelsQuery: "[*].ansible_facts.nodeLabelRaw"

  - name: Label nodes
    k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Node
        metadata:
          name: "{{ item.1 }}"
          labels:
            securitydomain: "{{ item.0.securitydomain }}"
    with_subelements:
      - "{{ nodeLabels }}"
      - "nodes"

  - name: Create ingresscontrollers
    k8s:
      state: present
      definition: "{{ lookup('template', 'templates/ingress_controller.j2') }}"
    with_items: "{{ ingress_controllers }}"
