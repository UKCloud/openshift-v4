---
    - hosts: localhost
    
      tasks:
      - name: Get default ingress controller
        set_fact:
          defaultIngressController: "{{ ingressControllers | to_json | from_json | json_query(defaultIngressControllerQuery) }}"
        vars:
          defaultIngressControllerQuery: "[?isdefault].name"

      - name: Get namespaces for all existing routes
        command: oc get routes --all-namespaces -o custom-columns=:metadata.namespace --no-headers=true
        register: namespacesRaw
    
      - name: Label namespaces so existing routes get picked up on appropriate ingresscontroller
        command: "oc label namespaces {{ namespacesRaw.stdout_lines | unique | join(' ') }} securitydomain={{ defaultIngressController }}"
    
      - name: Get nodes
        command: oc get nodes -o custom-columns=:metadata.name --no-headers=true
        register: nodesRaw
    
      - name: Label nodes
        command: "oc label nodes {{ nodesRaw.stdout_lines | to_json | from_json | json_query(hostQuery) | join(' ')}} securitydomain={{ item.name }}"
        vars:
          hostQuery: "[?contains(@,'worker-{{ item.name }}')]"
        with_items: "{{ ingressControllers }}"
    
      - name: Create ingresscontrollers
        k8s:
          state: present
          definition:
            apiVersion: operator.openshift.io/v1
            kind: IngressController
            metadata:
              namespace: openshift-ingress-operator
              name: "{{ item.name }}"
            spec:
              domain: "{{ item.domain }}"
              namespaceSelector:
                matchLabels:
                  securitydomain: "{{ item.name }}"
              nodePlacement:
                nodeSelector:
                  matchLabels:
                    securitydomain: "{{ item.name }}"
              tolerations:
              - effect: NoSchedule
                operator: Exists
              #defaultCertificate:
              #  name: "{{ item.name }}-certs"
              endpointPublishingStrategy:
                type: HostNetwork
        with_items: "{{ ingressControllers }}"
