#!/bin/bash
# Script to pull stage2 containers from registry and run stage2

podman login --tls-verify=false -u "{{ registry_username }}" -p "$(cat /home/core/registry.auth)" https://{{ registry_url }}
#podman pull --tls-verify=false {{ registry_url }}/3.setup-bastion:{{ image_tag }}
podman pull --tls-verify=false {{ registry_url }}/4.run-installer:{{ image_tag }}
podman pull --tls-verify=false {{ registry_url }}/6.add-ignition:{{ image_tag }}
podman pull --tls-verify=false {{ registry_url }}/5.ign-webserver:{{ image_tag }}
podman pull --tls-verify=false {{ registry_url }}/7.terraform-deploy:{{ image_tag }}
podman pull --tls-verify=false {{ registry_url }}/8.post-deployment:{{ image_tag }}

## INPUTS: config.json, secrets.json (in /home/core/deployconfig on bastion)
# Run "3.setup-bastion/Dockerfile"
#podman run  -v /home/core/deployconfig:/tmp/workingdir:z 3.setup-bastion:{{ image_tag }}
## OUTPUTS: ansible-hosts (for ansible post deploy task), install-config.yaml (for installer)

## INPUTS: config.json, secrets.json install-config.yaml
# Run "4.run-installer/Dockerfile"
podman run  -v /home/core/deployconfig:/tmp/workingdir:z 4.run-installer:{{ image_tag }}
## OUTPUTS: worker.ign bootstrap.ign master.ign

## INPUTS: bootstrap.ign
# Run "5.ign-webserver/Dockerfile"
podman stop ign-webserver
podman rm ign-webserver
podman run --name ign-webserver -d -v /home/core/deployconfig/bootstrap.ign:/usr/share/nginx/html/bootstrap.ign:z --network host -p 80:80 5.ign-webserver:{{ image_tag }}
## OUTPUTS: none (container continues to run) Container serves the ign file from the bastions IP

## INPUTS: config.json worker.ign bootstrap.ign master.ign
# Run "6.add-ignition/Dockerfile"
podman run -v /home/core/deployconfig:/tmp/workingdir:z 6.add-ignition:{{ image_tag }}
## OUTPUTS: config.json (updated with ign)

## INPUTS: config.json secrets.json
# Run "7.terraform-deploy/Dockerfile"
podman run -v /home/core/deployconfig:/tmp/workingdir:z 7.terraform-deploy:{{ image_tag }}
## OUTPUTS: VMs are created. terraform.tfstate

# Wait a while for svcs machines to start..
echo "Waiting a minute or two for svcs VMs to start before DNS initialisation"
sleep 200

## INPUTS: ansible-hosts from stage 3,
# Run "8.post-deployment/Dockerfile"
podman run  -v /home/core/deployconfig:/tmp/workingdir:z 8.post-deployment:{{ image_tag }}
## OUTPUTS: VMs are configured for DNS (so OpenShift initialisation can proceed)

echo "Add KUBECONFIG to bash_profile"
echo "export KUBECONFIG=~/deployconfig/auth/kubeconfig" >> /home/core/.bash_profile

echo "change permissions on auth files"
chmod 755 /home/core/deployconfig/auth
chmod 666 /home/core/deployconfig/auth/*

echo "Waiting 10 minutes for cluster to start up before polling..."
sleep 600

# Remove webserver container
echo "Remove webserver container"
podman stop ign-webserver
podman rm ign-webserver

# Wait for install to complete and then immediately kill off bootstrap
podman run --entrypoint="/usr/local/4.run-installer/waitforcomplete.sh" -v /home/core/deployconfig:/tmp/workingdir:z 4.run-installer:{{ image_tag }}
## DISABLED to allow troubleshooting of intermittant issue:
podman run --entrypoint="./removebootstrap.sh" -v /home/core/deployconfig:/tmp/workingdir:z 7.terraform-deploy:{{ image_tag }}

echo "openshift-v4 installer completed: Stage1 9.finalise-install now needs to be ran from outside to remove bootstrap from LB pools and change monitors"

echo "Disabling/removing service"
systemctl disable stage2-containers.service
rm /etc/systemd/system/stage2-containers.service
systemctl daemon-reload
systemctl reset-failed stage2-containers.service
