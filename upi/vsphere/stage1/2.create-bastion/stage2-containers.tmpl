#!/bin/bash
# Script to pull stage2 containers from registry and run stage2

podman login --tls-verify=false -u "<%= $registryusername %>" -p "$(cat /home/core/registry.auth)" https://<%= $registryurl %>
podman pull --tls-verify=false <%= $registryurl %>/3.setup-bastion:<%= $imagetag %>
podman pull --tls-verify=false <%= $registryurl %>/4.run-installer:<%= $imagetag %>
podman pull --tls-verify=false <%= $registryurl %>/6.add-ignition:<%= $imagetag %>
podman pull --tls-verify=false <%= $registryurl %>/5.ign-webserver:<%= $imagetag %>
podman pull --tls-verify=false <%= $registryurl %>/7.terraform-deploy:<%= $imagetag %>
podman pull --tls-verify=false <%= $registryurl %>/8.post-deployment:<%= $imagetag %>

<% if($useletsencrypt -eq "True" ) { %>
podman pull --tls-verify=false <%= $registryurl %>/letsencrypt:<%= $imagetag %>
<% } %>

## INPUTS: config.json, secrets.json (in /home/core/deployconfig on bastion)
# Run "3.setup-bastion/Dockerfile"
podman run  -v /home/core/deployconfig:/tmp/workingdir:z 3.setup-bastion:<%= $imagetag %>
## OUTPUTS: ansible-hosts (for ansible post deploy task), install-config.yaml (for installer)

## INPUTS: config.json, secrets.json install-config.yaml
# Run "4.run-installer/Dockerfile"
podman run  -v /home/core/deployconfig:/tmp/workingdir:z 4.run-installer:<%= $imagetag %>
## OUTPUTS: worker.ign bootstrap.ign master.ign

## INPUTS: bootstrap.ign
# Run "5.ign-webserver/Dockerfile"
podman stop ign-webserver
podman rm ign-webserver
podman run --name ign-webserver -d -v /home/core/deployconfig/bootstrap.ign:/usr/share/nginx/html/bootstrap.ign:z --network host -p 80:80 5.ign-webserver:<%= $imagetag %>
## OUTPUTS: none (container continues to run) Container serves the ign file from the bastions IP

## INPUTS: config.json worker.ign bootstrap.ign master.ign
# Run "6.add-ignition/Dockerfile"
podman run -v /home/core/deployconfig:/tmp/workingdir:z 6.add-ignition:<%= $imagetag %>
## OUTPUTS: config.json (updated with ign)

## INPUTS: config.json secrets.json
# Run "7.terraform-deploy/Dockerfile"
podman run -v /home/core/deployconfig:/tmp/workingdir:z 7.terraform-deploy:<%= $imagetag %>
## OUTPUTS: VMs are created. terraform.tfstate


# Wait a while for svcs machines to start..
echo "Waiting a minute or two for svcs VMs to start before DNS initialisation"
sleep 120


## INPUTS: ansible-hosts from stage 3,
# Run "8.post-deployment/Dockerfile"
podman run  -v /home/core/deployconfig:/tmp/workingdir:z 8.post-deployment:<%= $imagetag %>
## OUTPUTS: VMs are configured for DNS (so OpenShift initialisation can proceed)

echo "Waiting 10 minutes for cluster to start up before polling..."
sleep 600

# Remove webserver container
echo "Remove webserver container"
podman stop ign-webserver
podman rm ign-webserver

# Wait for install to complete and then immediately kill off bootstrap
podman run --entrypoint="/usr/local/4.run-installer/waitforcomplete.sh" -v /home/core/deployconfig:/tmp/workingdir:z 4.run-installer:<%= $imagetag %>
## DISABLED to allow troubleshooting of intermittant issue:
###podman run --entrypoint="./removebootstrap.sh" -v /home/core/deployconfig:/tmp/workingdir:z 7.terraform-deploy:<%= $imagetag %>

echo "openshift-v4 installer completed: Stage1 9.finalise-install now needs to be ran from outside to remove bootstrap from LB pools and change monitors"

<% if($useletsencrypt -eq "True" ) { %>
echo "Waiting an extra 15 minutes for cluster to fully initialise before putting signed certs in place"
sleep 900

podman run -v /bin/oc:/usr/local/bin/oc:ro -v /home/core/deployconfig:/root:z letsencrypt:<%= $imagetag %>

echo "Enable Timer service to renew lets encrypt certs"
echo "[Unit]
Description=Renews Cluster certs in letsencrypt
[Service]
Type=oneshot
ExecStart=/usr/bin/sh -c 'podman run --entrypoint=\"/usr/local/letsencrypt/renew.sh\" -itv /home/core/deployconfig:/root:z -v /bin/oc:/usr/local/bin/oc:ro letsencrypt:<%= $imagetag %>'" > /etc/systemd/system/renewcerts.service

echo "[Unit]
Description=Run Renew certs every 10mins
[Timer]
OnCalendar=daily
RandomizedDelaySec=3600" > /etc/systemd/system/renewcerts.timer

systemctl daemon-reload  
systemctl enable renewcerts.timer
systemctl start renewcerts.timer  
<% } %>

echo "Disabling/removing service"
systemctl disable stage2-containers.service
rm /etc/systemd/system/stage2-containers.service
systemctl daemon-reload
systemctl reset-failed stage2-containers.service
