---
- hosts: localhost
  connection: local

  vars:
    namespace: "ukc-ingress"
    net2NetworkName: "{{ net2ExternalNetwork | replace(' ','-') | replace('_','-') | lower }}"

  tasks:
  - name: Create ImageStream
    k8s:
      state: present
      definition:
        apiVersion: image.openshift.io/v1
        kind: ImageStream
        metadata:
          name: update-loadbalancer-members
          namespace: "{{ namespace }}"
        spec:
          lookupPolicy:
            local: true

  - name: Create BuildConfig
    k8s:
      state: present
      definition:
        apiVersion: build.openshift.io/v1
        kind: BuildConfig
        metadata:
          labels:
            build: update-loadbalancer-members
          name: update-loadbalancer-members
          namespace: "{{ namespace }}"
        spec:
          output:
            to:
              kind: ImageStreamTag
              name: update-loadbalancer-members:latest
          source:
            binary: {}
            type: Binary
          strategy:
            dockerStrategy: {}
            type: Docker

  - name: Run Docker build
    command: "oc start-build update-loadbalancer-members --from-dir . -F -n {{ namespace }}"
    args:
      chdir: "./build"
    register: loadbalancerBuildStatus
    failed_when: "'Push successful' not in loadbalancerBuildStatus.stdout_lines"

  - name: Delete BuildConfig
    k8s:
      state: absent
      definition:
        apiVersion: build.openshift.io/v1
        kind: BuildConfig
        metadata:
          name: update-loadbalancer-members
          namespace: "{{ namespace }}"

  - name: Create update-loadbalancer-members CronJob
    k8s:
      state: present
      definition: "{{ lookup('template', 'templates/cronjob-update-loadbalancer-members.j2') }}"

  - name: Create IngressController
    k8s:
      state: present
      definition:
        apiVersion: operator.openshift.io/v1
        kind: IngressController
        metadata:
          namespace: openshift-ingress-operator
          name: "{{ net2NetworkName }}"
        spec:
          domain: "{{ net2NetworkName }}.{{ domainSuffix }}"
          nodePlacement:
            nodeSelector:
              matchLabels:
                network: "{{ net2NetworkName }}"
          replicas: 2
          routeSelector:
            matchExpressions:
            - key: network
              operator: In
              values:
              - "{{ net2NetworkName }}"
